// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TemperatureData.proto

#ifndef PROTOBUF_TemperatureData_2eproto__INCLUDED
#define PROTOBUF_TemperatureData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TemperatureData_2eproto();
void protobuf_AssignDesc_TemperatureData_2eproto();
void protobuf_ShutdownFile_TemperatureData_2eproto();

class TemperatureData;
class TemperatureData_Temperature;
class TemperatureData_SingleDay;

// ===================================================================

class TemperatureData_Temperature : public ::google::protobuf::Message {
 public:
  TemperatureData_Temperature();
  virtual ~TemperatureData_Temperature();

  TemperatureData_Temperature(const TemperatureData_Temperature& from);

  inline TemperatureData_Temperature& operator=(const TemperatureData_Temperature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemperatureData_Temperature& default_instance();

  void Swap(TemperatureData_Temperature* other);

  // implements Message ----------------------------------------------

  TemperatureData_Temperature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemperatureData_Temperature& from);
  void MergeFrom(const TemperatureData_Temperature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // required uint32 temperature = 2;
  inline bool has_temperature() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 2;
  inline ::google::protobuf::uint32 temperature() const;
  inline void set_temperature(::google::protobuf::uint32 value);

  // optional uint32 humidity = 3;
  inline bool has_humidity() const;
  inline void clear_humidity();
  static const int kHumidityFieldNumber = 3;
  inline ::google::protobuf::uint32 humidity() const;
  inline void set_humidity(::google::protobuf::uint32 value);

  // optional uint32 uniqueId = 4;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 4;
  inline ::google::protobuf::uint32 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TemperatureData.Temperature)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_temperature();
  inline void clear_has_temperature();
  inline void set_has_humidity();
  inline void clear_has_humidity();
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 temperature_;
  ::google::protobuf::uint32 humidity_;
  ::google::protobuf::uint32 uniqueid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TemperatureData_2eproto();
  friend void protobuf_AssignDesc_TemperatureData_2eproto();
  friend void protobuf_ShutdownFile_TemperatureData_2eproto();

  void InitAsDefaultInstance();
  static TemperatureData_Temperature* default_instance_;
};
// -------------------------------------------------------------------

class TemperatureData_SingleDay : public ::google::protobuf::Message {
 public:
  TemperatureData_SingleDay();
  virtual ~TemperatureData_SingleDay();

  TemperatureData_SingleDay(const TemperatureData_SingleDay& from);

  inline TemperatureData_SingleDay& operator=(const TemperatureData_SingleDay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemperatureData_SingleDay& default_instance();

  void Swap(TemperatureData_SingleDay* other);

  // implements Message ----------------------------------------------

  TemperatureData_SingleDay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemperatureData_SingleDay& from);
  void MergeFrom(const TemperatureData_SingleDay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional .TemperatureData.Temperature currentTemperature = 2;
  inline bool has_currenttemperature() const;
  inline void clear_currenttemperature();
  static const int kCurrentTemperatureFieldNumber = 2;
  inline const ::TemperatureData_Temperature& currenttemperature() const;
  inline ::TemperatureData_Temperature* mutable_currenttemperature();
  inline ::TemperatureData_Temperature* release_currenttemperature();
  inline void set_allocated_currenttemperature(::TemperatureData_Temperature* currenttemperature);

  // optional .TemperatureData.Temperature dayHigh = 3;
  inline bool has_dayhigh() const;
  inline void clear_dayhigh();
  static const int kDayHighFieldNumber = 3;
  inline const ::TemperatureData_Temperature& dayhigh() const;
  inline ::TemperatureData_Temperature* mutable_dayhigh();
  inline ::TemperatureData_Temperature* release_dayhigh();
  inline void set_allocated_dayhigh(::TemperatureData_Temperature* dayhigh);

  // optional .TemperatureData.Temperature dayLow = 4;
  inline bool has_daylow() const;
  inline void clear_daylow();
  static const int kDayLowFieldNumber = 4;
  inline const ::TemperatureData_Temperature& daylow() const;
  inline ::TemperatureData_Temperature* mutable_daylow();
  inline ::TemperatureData_Temperature* release_daylow();
  inline void set_allocated_daylow(::TemperatureData_Temperature* daylow);

  // repeated .TemperatureData.Temperature temperatures = 5;
  inline int temperatures_size() const;
  inline void clear_temperatures();
  static const int kTemperaturesFieldNumber = 5;
  inline const ::TemperatureData_Temperature& temperatures(int index) const;
  inline ::TemperatureData_Temperature* mutable_temperatures(int index);
  inline ::TemperatureData_Temperature* add_temperatures();
  inline const ::google::protobuf::RepeatedPtrField< ::TemperatureData_Temperature >&
      temperatures() const;
  inline ::google::protobuf::RepeatedPtrField< ::TemperatureData_Temperature >*
      mutable_temperatures();

  // @@protoc_insertion_point(class_scope:TemperatureData.SingleDay)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_currenttemperature();
  inline void clear_has_currenttemperature();
  inline void set_has_dayhigh();
  inline void clear_has_dayhigh();
  inline void set_has_daylow();
  inline void clear_has_daylow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TemperatureData_Temperature* currenttemperature_;
  ::TemperatureData_Temperature* dayhigh_;
  ::TemperatureData_Temperature* daylow_;
  ::google::protobuf::RepeatedPtrField< ::TemperatureData_Temperature > temperatures_;
  ::google::protobuf::uint32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TemperatureData_2eproto();
  friend void protobuf_AssignDesc_TemperatureData_2eproto();
  friend void protobuf_ShutdownFile_TemperatureData_2eproto();

  void InitAsDefaultInstance();
  static TemperatureData_SingleDay* default_instance_;
};
// -------------------------------------------------------------------

class TemperatureData : public ::google::protobuf::Message {
 public:
  TemperatureData();
  virtual ~TemperatureData();

  TemperatureData(const TemperatureData& from);

  inline TemperatureData& operator=(const TemperatureData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemperatureData& default_instance();

  void Swap(TemperatureData* other);

  // implements Message ----------------------------------------------

  TemperatureData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemperatureData& from);
  void MergeFrom(const TemperatureData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TemperatureData_Temperature Temperature;
  typedef TemperatureData_SingleDay SingleDay;

  // accessors -------------------------------------------------------

  // required uint32 sensorId = 1;
  inline bool has_sensorid() const;
  inline void clear_sensorid();
  static const int kSensorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sensorid() const;
  inline void set_sensorid(::google::protobuf::uint32 value);

  // repeated .TemperatureData.SingleDay dayData = 2;
  inline int daydata_size() const;
  inline void clear_daydata();
  static const int kDayDataFieldNumber = 2;
  inline const ::TemperatureData_SingleDay& daydata(int index) const;
  inline ::TemperatureData_SingleDay* mutable_daydata(int index);
  inline ::TemperatureData_SingleDay* add_daydata();
  inline const ::google::protobuf::RepeatedPtrField< ::TemperatureData_SingleDay >&
      daydata() const;
  inline ::google::protobuf::RepeatedPtrField< ::TemperatureData_SingleDay >*
      mutable_daydata();

  // @@protoc_insertion_point(class_scope:TemperatureData)
 private:
  inline void set_has_sensorid();
  inline void clear_has_sensorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TemperatureData_SingleDay > daydata_;
  ::google::protobuf::uint32 sensorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TemperatureData_2eproto();
  friend void protobuf_AssignDesc_TemperatureData_2eproto();
  friend void protobuf_ShutdownFile_TemperatureData_2eproto();

  void InitAsDefaultInstance();
  static TemperatureData* default_instance_;
};
// ===================================================================


// ===================================================================

// TemperatureData_Temperature

// required uint32 timestamp = 1;
inline bool TemperatureData_Temperature::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemperatureData_Temperature::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemperatureData_Temperature::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemperatureData_Temperature::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 TemperatureData_Temperature::timestamp() const {
  return timestamp_;
}
inline void TemperatureData_Temperature::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required uint32 temperature = 2;
inline bool TemperatureData_Temperature::has_temperature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TemperatureData_Temperature::set_has_temperature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TemperatureData_Temperature::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TemperatureData_Temperature::clear_temperature() {
  temperature_ = 0u;
  clear_has_temperature();
}
inline ::google::protobuf::uint32 TemperatureData_Temperature::temperature() const {
  return temperature_;
}
inline void TemperatureData_Temperature::set_temperature(::google::protobuf::uint32 value) {
  set_has_temperature();
  temperature_ = value;
}

// optional uint32 humidity = 3;
inline bool TemperatureData_Temperature::has_humidity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TemperatureData_Temperature::set_has_humidity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TemperatureData_Temperature::clear_has_humidity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TemperatureData_Temperature::clear_humidity() {
  humidity_ = 0u;
  clear_has_humidity();
}
inline ::google::protobuf::uint32 TemperatureData_Temperature::humidity() const {
  return humidity_;
}
inline void TemperatureData_Temperature::set_humidity(::google::protobuf::uint32 value) {
  set_has_humidity();
  humidity_ = value;
}

// optional uint32 uniqueId = 4;
inline bool TemperatureData_Temperature::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TemperatureData_Temperature::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TemperatureData_Temperature::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TemperatureData_Temperature::clear_uniqueid() {
  uniqueid_ = 0u;
  clear_has_uniqueid();
}
inline ::google::protobuf::uint32 TemperatureData_Temperature::uniqueid() const {
  return uniqueid_;
}
inline void TemperatureData_Temperature::set_uniqueid(::google::protobuf::uint32 value) {
  set_has_uniqueid();
  uniqueid_ = value;
}

// -------------------------------------------------------------------

// TemperatureData_SingleDay

// required uint32 timestamp = 1;
inline bool TemperatureData_SingleDay::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemperatureData_SingleDay::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemperatureData_SingleDay::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemperatureData_SingleDay::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 TemperatureData_SingleDay::timestamp() const {
  return timestamp_;
}
inline void TemperatureData_SingleDay::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .TemperatureData.Temperature currentTemperature = 2;
inline bool TemperatureData_SingleDay::has_currenttemperature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TemperatureData_SingleDay::set_has_currenttemperature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TemperatureData_SingleDay::clear_has_currenttemperature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TemperatureData_SingleDay::clear_currenttemperature() {
  if (currenttemperature_ != NULL) currenttemperature_->::TemperatureData_Temperature::Clear();
  clear_has_currenttemperature();
}
inline const ::TemperatureData_Temperature& TemperatureData_SingleDay::currenttemperature() const {
  return currenttemperature_ != NULL ? *currenttemperature_ : *default_instance_->currenttemperature_;
}
inline ::TemperatureData_Temperature* TemperatureData_SingleDay::mutable_currenttemperature() {
  set_has_currenttemperature();
  if (currenttemperature_ == NULL) currenttemperature_ = new ::TemperatureData_Temperature;
  return currenttemperature_;
}
inline ::TemperatureData_Temperature* TemperatureData_SingleDay::release_currenttemperature() {
  clear_has_currenttemperature();
  ::TemperatureData_Temperature* temp = currenttemperature_;
  currenttemperature_ = NULL;
  return temp;
}
inline void TemperatureData_SingleDay::set_allocated_currenttemperature(::TemperatureData_Temperature* currenttemperature) {
  delete currenttemperature_;
  currenttemperature_ = currenttemperature;
  if (currenttemperature) {
    set_has_currenttemperature();
  } else {
    clear_has_currenttemperature();
  }
}

// optional .TemperatureData.Temperature dayHigh = 3;
inline bool TemperatureData_SingleDay::has_dayhigh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TemperatureData_SingleDay::set_has_dayhigh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TemperatureData_SingleDay::clear_has_dayhigh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TemperatureData_SingleDay::clear_dayhigh() {
  if (dayhigh_ != NULL) dayhigh_->::TemperatureData_Temperature::Clear();
  clear_has_dayhigh();
}
inline const ::TemperatureData_Temperature& TemperatureData_SingleDay::dayhigh() const {
  return dayhigh_ != NULL ? *dayhigh_ : *default_instance_->dayhigh_;
}
inline ::TemperatureData_Temperature* TemperatureData_SingleDay::mutable_dayhigh() {
  set_has_dayhigh();
  if (dayhigh_ == NULL) dayhigh_ = new ::TemperatureData_Temperature;
  return dayhigh_;
}
inline ::TemperatureData_Temperature* TemperatureData_SingleDay::release_dayhigh() {
  clear_has_dayhigh();
  ::TemperatureData_Temperature* temp = dayhigh_;
  dayhigh_ = NULL;
  return temp;
}
inline void TemperatureData_SingleDay::set_allocated_dayhigh(::TemperatureData_Temperature* dayhigh) {
  delete dayhigh_;
  dayhigh_ = dayhigh;
  if (dayhigh) {
    set_has_dayhigh();
  } else {
    clear_has_dayhigh();
  }
}

// optional .TemperatureData.Temperature dayLow = 4;
inline bool TemperatureData_SingleDay::has_daylow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TemperatureData_SingleDay::set_has_daylow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TemperatureData_SingleDay::clear_has_daylow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TemperatureData_SingleDay::clear_daylow() {
  if (daylow_ != NULL) daylow_->::TemperatureData_Temperature::Clear();
  clear_has_daylow();
}
inline const ::TemperatureData_Temperature& TemperatureData_SingleDay::daylow() const {
  return daylow_ != NULL ? *daylow_ : *default_instance_->daylow_;
}
inline ::TemperatureData_Temperature* TemperatureData_SingleDay::mutable_daylow() {
  set_has_daylow();
  if (daylow_ == NULL) daylow_ = new ::TemperatureData_Temperature;
  return daylow_;
}
inline ::TemperatureData_Temperature* TemperatureData_SingleDay::release_daylow() {
  clear_has_daylow();
  ::TemperatureData_Temperature* temp = daylow_;
  daylow_ = NULL;
  return temp;
}
inline void TemperatureData_SingleDay::set_allocated_daylow(::TemperatureData_Temperature* daylow) {
  delete daylow_;
  daylow_ = daylow;
  if (daylow) {
    set_has_daylow();
  } else {
    clear_has_daylow();
  }
}

// repeated .TemperatureData.Temperature temperatures = 5;
inline int TemperatureData_SingleDay::temperatures_size() const {
  return temperatures_.size();
}
inline void TemperatureData_SingleDay::clear_temperatures() {
  temperatures_.Clear();
}
inline const ::TemperatureData_Temperature& TemperatureData_SingleDay::temperatures(int index) const {
  return temperatures_.Get(index);
}
inline ::TemperatureData_Temperature* TemperatureData_SingleDay::mutable_temperatures(int index) {
  return temperatures_.Mutable(index);
}
inline ::TemperatureData_Temperature* TemperatureData_SingleDay::add_temperatures() {
  return temperatures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TemperatureData_Temperature >&
TemperatureData_SingleDay::temperatures() const {
  return temperatures_;
}
inline ::google::protobuf::RepeatedPtrField< ::TemperatureData_Temperature >*
TemperatureData_SingleDay::mutable_temperatures() {
  return &temperatures_;
}

// -------------------------------------------------------------------

// TemperatureData

// required uint32 sensorId = 1;
inline bool TemperatureData::has_sensorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemperatureData::set_has_sensorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemperatureData::clear_has_sensorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemperatureData::clear_sensorid() {
  sensorid_ = 0u;
  clear_has_sensorid();
}
inline ::google::protobuf::uint32 TemperatureData::sensorid() const {
  return sensorid_;
}
inline void TemperatureData::set_sensorid(::google::protobuf::uint32 value) {
  set_has_sensorid();
  sensorid_ = value;
}

// repeated .TemperatureData.SingleDay dayData = 2;
inline int TemperatureData::daydata_size() const {
  return daydata_.size();
}
inline void TemperatureData::clear_daydata() {
  daydata_.Clear();
}
inline const ::TemperatureData_SingleDay& TemperatureData::daydata(int index) const {
  return daydata_.Get(index);
}
inline ::TemperatureData_SingleDay* TemperatureData::mutable_daydata(int index) {
  return daydata_.Mutable(index);
}
inline ::TemperatureData_SingleDay* TemperatureData::add_daydata() {
  return daydata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TemperatureData_SingleDay >&
TemperatureData::daydata() const {
  return daydata_;
}
inline ::google::protobuf::RepeatedPtrField< ::TemperatureData_SingleDay >*
TemperatureData::mutable_daydata() {
  return &daydata_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TemperatureData_2eproto__INCLUDED
