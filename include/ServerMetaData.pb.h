// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMetaData.proto

#ifndef PROTOBUF_ServerMetaData_2eproto__INCLUDED
#define PROTOBUF_ServerMetaData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServerMetaData_2eproto();
void protobuf_AssignDesc_ServerMetaData_2eproto();
void protobuf_ShutdownFile_ServerMetaData_2eproto();

class ServerMetaData;
class ServerMetaData_Sensor;

// ===================================================================

class ServerMetaData_Sensor : public ::google::protobuf::Message {
 public:
  ServerMetaData_Sensor();
  virtual ~ServerMetaData_Sensor();

  ServerMetaData_Sensor(const ServerMetaData_Sensor& from);

  inline ServerMetaData_Sensor& operator=(const ServerMetaData_Sensor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMetaData_Sensor& default_instance();

  void Swap(ServerMetaData_Sensor* other);

  // implements Message ----------------------------------------------

  ServerMetaData_Sensor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerMetaData_Sensor& from);
  void MergeFrom(const ServerMetaData_Sensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sensorId = 1;
  inline bool has_sensorid() const;
  inline void clear_sensorid();
  static const int kSensorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sensorid() const;
  inline void set_sensorid(::google::protobuf::uint32 value);

  // optional string sensorName = 2;
  inline bool has_sensorname() const;
  inline void clear_sensorname();
  static const int kSensorNameFieldNumber = 2;
  inline const ::std::string& sensorname() const;
  inline void set_sensorname(const ::std::string& value);
  inline void set_sensorname(const char* value);
  inline void set_sensorname(const char* value, size_t size);
  inline ::std::string* mutable_sensorname();
  inline ::std::string* release_sensorname();
  inline void set_allocated_sensorname(::std::string* sensorname);

  // @@protoc_insertion_point(class_scope:ServerMetaData.Sensor)
 private:
  inline void set_has_sensorid();
  inline void clear_has_sensorid();
  inline void set_has_sensorname();
  inline void clear_has_sensorname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sensorname_;
  ::google::protobuf::uint32 sensorid_;
  friend void  protobuf_AddDesc_ServerMetaData_2eproto();
  friend void protobuf_AssignDesc_ServerMetaData_2eproto();
  friend void protobuf_ShutdownFile_ServerMetaData_2eproto();

  void InitAsDefaultInstance();
  static ServerMetaData_Sensor* default_instance_;
};
// -------------------------------------------------------------------

class ServerMetaData : public ::google::protobuf::Message {
 public:
  ServerMetaData();
  virtual ~ServerMetaData();

  ServerMetaData(const ServerMetaData& from);

  inline ServerMetaData& operator=(const ServerMetaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMetaData& default_instance();

  void Swap(ServerMetaData* other);

  // implements Message ----------------------------------------------

  ServerMetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerMetaData& from);
  void MergeFrom(const ServerMetaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerMetaData_Sensor Sensor;

  // accessors -------------------------------------------------------

  // repeated .ServerMetaData.Sensor sensors = 1;
  inline int sensors_size() const;
  inline void clear_sensors();
  static const int kSensorsFieldNumber = 1;
  inline const ::ServerMetaData_Sensor& sensors(int index) const;
  inline ::ServerMetaData_Sensor* mutable_sensors(int index);
  inline ::ServerMetaData_Sensor* add_sensors();
  inline const ::google::protobuf::RepeatedPtrField< ::ServerMetaData_Sensor >&
      sensors() const;
  inline ::google::protobuf::RepeatedPtrField< ::ServerMetaData_Sensor >*
      mutable_sensors();

  // optional int32 timeZoneOffset = 2;
  inline bool has_timezoneoffset() const;
  inline void clear_timezoneoffset();
  static const int kTimeZoneOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 timezoneoffset() const;
  inline void set_timezoneoffset(::google::protobuf::int32 value);

  // optional double longitude = 3;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  inline double longitude() const;
  inline void set_longitude(double value);

  // optional double latitude = 4;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  inline double latitude() const;
  inline void set_latitude(double value);

  // @@protoc_insertion_point(class_scope:ServerMetaData)
 private:
  inline void set_has_timezoneoffset();
  inline void clear_has_timezoneoffset();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ServerMetaData_Sensor > sensors_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int32 timezoneoffset_;
  friend void  protobuf_AddDesc_ServerMetaData_2eproto();
  friend void protobuf_AssignDesc_ServerMetaData_2eproto();
  friend void protobuf_ShutdownFile_ServerMetaData_2eproto();

  void InitAsDefaultInstance();
  static ServerMetaData* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerMetaData_Sensor

// required uint32 sensorId = 1;
inline bool ServerMetaData_Sensor::has_sensorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerMetaData_Sensor::set_has_sensorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerMetaData_Sensor::clear_has_sensorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerMetaData_Sensor::clear_sensorid() {
  sensorid_ = 0u;
  clear_has_sensorid();
}
inline ::google::protobuf::uint32 ServerMetaData_Sensor::sensorid() const {
  // @@protoc_insertion_point(field_get:ServerMetaData.Sensor.sensorId)
  return sensorid_;
}
inline void ServerMetaData_Sensor::set_sensorid(::google::protobuf::uint32 value) {
  set_has_sensorid();
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:ServerMetaData.Sensor.sensorId)
}

// optional string sensorName = 2;
inline bool ServerMetaData_Sensor::has_sensorname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerMetaData_Sensor::set_has_sensorname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerMetaData_Sensor::clear_has_sensorname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerMetaData_Sensor::clear_sensorname() {
  if (sensorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensorname_->clear();
  }
  clear_has_sensorname();
}
inline const ::std::string& ServerMetaData_Sensor::sensorname() const {
  // @@protoc_insertion_point(field_get:ServerMetaData.Sensor.sensorName)
  return *sensorname_;
}
inline void ServerMetaData_Sensor::set_sensorname(const ::std::string& value) {
  set_has_sensorname();
  if (sensorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensorname_ = new ::std::string;
  }
  sensorname_->assign(value);
  // @@protoc_insertion_point(field_set:ServerMetaData.Sensor.sensorName)
}
inline void ServerMetaData_Sensor::set_sensorname(const char* value) {
  set_has_sensorname();
  if (sensorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensorname_ = new ::std::string;
  }
  sensorname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ServerMetaData.Sensor.sensorName)
}
inline void ServerMetaData_Sensor::set_sensorname(const char* value, size_t size) {
  set_has_sensorname();
  if (sensorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensorname_ = new ::std::string;
  }
  sensorname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServerMetaData.Sensor.sensorName)
}
inline ::std::string* ServerMetaData_Sensor::mutable_sensorname() {
  set_has_sensorname();
  if (sensorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensorname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ServerMetaData.Sensor.sensorName)
  return sensorname_;
}
inline ::std::string* ServerMetaData_Sensor::release_sensorname() {
  clear_has_sensorname();
  if (sensorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sensorname_;
    sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerMetaData_Sensor::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sensorname_;
  }
  if (sensorname) {
    set_has_sensorname();
    sensorname_ = sensorname;
  } else {
    clear_has_sensorname();
    sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ServerMetaData.Sensor.sensorName)
}

// -------------------------------------------------------------------

// ServerMetaData

// repeated .ServerMetaData.Sensor sensors = 1;
inline int ServerMetaData::sensors_size() const {
  return sensors_.size();
}
inline void ServerMetaData::clear_sensors() {
  sensors_.Clear();
}
inline const ::ServerMetaData_Sensor& ServerMetaData::sensors(int index) const {
  // @@protoc_insertion_point(field_get:ServerMetaData.sensors)
  return sensors_.Get(index);
}
inline ::ServerMetaData_Sensor* ServerMetaData::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:ServerMetaData.sensors)
  return sensors_.Mutable(index);
}
inline ::ServerMetaData_Sensor* ServerMetaData::add_sensors() {
  // @@protoc_insertion_point(field_add:ServerMetaData.sensors)
  return sensors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerMetaData_Sensor >&
ServerMetaData::sensors() const {
  // @@protoc_insertion_point(field_list:ServerMetaData.sensors)
  return sensors_;
}
inline ::google::protobuf::RepeatedPtrField< ::ServerMetaData_Sensor >*
ServerMetaData::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:ServerMetaData.sensors)
  return &sensors_;
}

// optional int32 timeZoneOffset = 2;
inline bool ServerMetaData::has_timezoneoffset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerMetaData::set_has_timezoneoffset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerMetaData::clear_has_timezoneoffset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerMetaData::clear_timezoneoffset() {
  timezoneoffset_ = 0;
  clear_has_timezoneoffset();
}
inline ::google::protobuf::int32 ServerMetaData::timezoneoffset() const {
  // @@protoc_insertion_point(field_get:ServerMetaData.timeZoneOffset)
  return timezoneoffset_;
}
inline void ServerMetaData::set_timezoneoffset(::google::protobuf::int32 value) {
  set_has_timezoneoffset();
  timezoneoffset_ = value;
  // @@protoc_insertion_point(field_set:ServerMetaData.timeZoneOffset)
}

// optional double longitude = 3;
inline bool ServerMetaData::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerMetaData::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerMetaData::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerMetaData::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double ServerMetaData::longitude() const {
  // @@protoc_insertion_point(field_get:ServerMetaData.longitude)
  return longitude_;
}
inline void ServerMetaData::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:ServerMetaData.longitude)
}

// optional double latitude = 4;
inline bool ServerMetaData::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerMetaData::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerMetaData::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerMetaData::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double ServerMetaData::latitude() const {
  // @@protoc_insertion_point(field_get:ServerMetaData.latitude)
  return latitude_;
}
inline void ServerMetaData::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:ServerMetaData.latitude)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerMetaData_2eproto__INCLUDED
