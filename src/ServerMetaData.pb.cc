// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMetaData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerMetaData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ServerMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerMetaData_Sensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMetaData_Sensor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerMetaData_2eproto() {
  protobuf_AddDesc_ServerMetaData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerMetaData.proto");
  GOOGLE_CHECK(file != NULL);
  ServerMetaData_descriptor_ = file->message_type(0);
  static const int ServerMetaData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMetaData, sensors_),
  };
  ServerMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerMetaData_descriptor_,
      ServerMetaData::default_instance_,
      ServerMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerMetaData));
  ServerMetaData_Sensor_descriptor_ = ServerMetaData_descriptor_->nested_type(0);
  static const int ServerMetaData_Sensor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMetaData_Sensor, sensorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMetaData_Sensor, sensorname_),
  };
  ServerMetaData_Sensor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerMetaData_Sensor_descriptor_,
      ServerMetaData_Sensor::default_instance_,
      ServerMetaData_Sensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMetaData_Sensor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMetaData_Sensor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerMetaData_Sensor));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerMetaData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerMetaData_descriptor_, &ServerMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerMetaData_Sensor_descriptor_, &ServerMetaData_Sensor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerMetaData_2eproto() {
  delete ServerMetaData::default_instance_;
  delete ServerMetaData_reflection_;
  delete ServerMetaData_Sensor::default_instance_;
  delete ServerMetaData_Sensor_reflection_;
}

void protobuf_AddDesc_ServerMetaData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ServerMetaData.proto\"i\n\016ServerMetaData"
    "\022\'\n\007sensors\030\001 \003(\0132\026.ServerMetaData.Senso"
    "r\032.\n\006Sensor\022\020\n\010sensorId\030\001 \002(\r\022\022\n\nsensorN"
    "ame\030\002 \001(\t", 129);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerMetaData.proto", &protobuf_RegisterTypes);
  ServerMetaData::default_instance_ = new ServerMetaData();
  ServerMetaData_Sensor::default_instance_ = new ServerMetaData_Sensor();
  ServerMetaData::default_instance_->InitAsDefaultInstance();
  ServerMetaData_Sensor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerMetaData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerMetaData_2eproto {
  StaticDescriptorInitializer_ServerMetaData_2eproto() {
    protobuf_AddDesc_ServerMetaData_2eproto();
  }
} static_descriptor_initializer_ServerMetaData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ServerMetaData_Sensor::kSensorIdFieldNumber;
const int ServerMetaData_Sensor::kSensorNameFieldNumber;
#endif  // !_MSC_VER

ServerMetaData_Sensor::ServerMetaData_Sensor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerMetaData_Sensor::InitAsDefaultInstance() {
}

ServerMetaData_Sensor::ServerMetaData_Sensor(const ServerMetaData_Sensor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerMetaData_Sensor::SharedCtor() {
  _cached_size_ = 0;
  sensorid_ = 0u;
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMetaData_Sensor::~ServerMetaData_Sensor() {
  SharedDtor();
}

void ServerMetaData_Sensor::SharedDtor() {
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void ServerMetaData_Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMetaData_Sensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMetaData_Sensor_descriptor_;
}

const ServerMetaData_Sensor& ServerMetaData_Sensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMetaData_2eproto();
  return *default_instance_;
}

ServerMetaData_Sensor* ServerMetaData_Sensor::default_instance_ = NULL;

ServerMetaData_Sensor* ServerMetaData_Sensor::New() const {
  return new ServerMetaData_Sensor;
}

void ServerMetaData_Sensor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sensorid_ = 0u;
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerMetaData_Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sensorId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensorid_)));
          set_has_sensorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerMetaData_Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sensorId = 1;
  if (has_sensorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sensorid(), output);
  }

  // optional string sensorName = 2;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sensorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerMetaData_Sensor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sensorId = 1;
  if (has_sensorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sensorid(), target);
  }

  // optional string sensorName = 2;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sensorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerMetaData_Sensor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sensorId = 1;
    if (has_sensorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensorid());
    }

    // optional string sensorName = 2;
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMetaData_Sensor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerMetaData_Sensor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerMetaData_Sensor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMetaData_Sensor::MergeFrom(const ServerMetaData_Sensor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensorid()) {
      set_sensorid(from.sensorid());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerMetaData_Sensor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMetaData_Sensor::CopyFrom(const ServerMetaData_Sensor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMetaData_Sensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerMetaData_Sensor::Swap(ServerMetaData_Sensor* other) {
  if (other != this) {
    std::swap(sensorid_, other->sensorid_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerMetaData_Sensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMetaData_Sensor_descriptor_;
  metadata.reflection = ServerMetaData_Sensor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerMetaData::kSensorsFieldNumber;
#endif  // !_MSC_VER

ServerMetaData::ServerMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerMetaData::InitAsDefaultInstance() {
}

ServerMetaData::ServerMetaData(const ServerMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerMetaData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMetaData::~ServerMetaData() {
  SharedDtor();
}

void ServerMetaData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMetaData_descriptor_;
}

const ServerMetaData& ServerMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMetaData_2eproto();
  return *default_instance_;
}

ServerMetaData* ServerMetaData::default_instance_ = NULL;

ServerMetaData* ServerMetaData::New() const {
  return new ServerMetaData;
}

void ServerMetaData::Clear() {
  sensors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerMetaData.Sensor sensors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sensors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ServerMetaData.Sensor sensors = 1;
  for (int i = 0; i < this->sensors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sensors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ServerMetaData.Sensor sensors = 1;
  for (int i = 0; i < this->sensors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sensors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerMetaData::ByteSize() const {
  int total_size = 0;

  // repeated .ServerMetaData.Sensor sensors = 1;
  total_size += 1 * this->sensors_size();
  for (int i = 0; i < this->sensors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMetaData::MergeFrom(const ServerMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensors_.MergeFrom(from.sensors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMetaData::CopyFrom(const ServerMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMetaData::IsInitialized() const {

  for (int i = 0; i < sensors_size(); i++) {
    if (!this->sensors(i).IsInitialized()) return false;
  }
  return true;
}

void ServerMetaData::Swap(ServerMetaData* other) {
  if (other != this) {
    sensors_.Swap(&other->sensors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMetaData_descriptor_;
  metadata.reflection = ServerMetaData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
