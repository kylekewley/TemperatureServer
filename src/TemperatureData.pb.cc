// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TemperatureData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TemperatureData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TemperatureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TemperatureData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TemperatureData_Temperature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TemperatureData_Temperature_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TemperatureData_2eproto() {
  protobuf_AddDesc_TemperatureData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TemperatureData.proto");
  GOOGLE_CHECK(file != NULL);
  TemperatureData_descriptor_ = file->message_type(0);
  static const int TemperatureData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureData, sensorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureData, temperatures_),
  };
  TemperatureData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TemperatureData_descriptor_,
      TemperatureData::default_instance_,
      TemperatureData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TemperatureData));
  TemperatureData_Temperature_descriptor_ = TemperatureData_descriptor_->nested_type(0);
  static const int TemperatureData_Temperature_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureData_Temperature, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureData_Temperature, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureData_Temperature, humidity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureData_Temperature, uniqueid_),
  };
  TemperatureData_Temperature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TemperatureData_Temperature_descriptor_,
      TemperatureData_Temperature::default_instance_,
      TemperatureData_Temperature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureData_Temperature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureData_Temperature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TemperatureData_Temperature));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TemperatureData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TemperatureData_descriptor_, &TemperatureData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TemperatureData_Temperature_descriptor_, &TemperatureData_Temperature::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TemperatureData_2eproto() {
  delete TemperatureData::default_instance_;
  delete TemperatureData_reflection_;
  delete TemperatureData_Temperature::default_instance_;
  delete TemperatureData_Temperature_reflection_;
}

void protobuf_AddDesc_TemperatureData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025TemperatureData.proto\"\262\001\n\017TemperatureD"
    "ata\022\020\n\010sensorId\030\001 \002(\r\0222\n\014temperatures\030\002 "
    "\003(\0132\034.TemperatureData.Temperature\032Y\n\013Tem"
    "perature\022\021\n\ttimestamp\030\001 \002(\r\022\023\n\013temperatu"
    "re\030\002 \002(\r\022\020\n\010humidity\030\003 \002(\r\022\020\n\010uniqueId\030\004"
    " \002(\r", 204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TemperatureData.proto", &protobuf_RegisterTypes);
  TemperatureData::default_instance_ = new TemperatureData();
  TemperatureData_Temperature::default_instance_ = new TemperatureData_Temperature();
  TemperatureData::default_instance_->InitAsDefaultInstance();
  TemperatureData_Temperature::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TemperatureData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TemperatureData_2eproto {
  StaticDescriptorInitializer_TemperatureData_2eproto() {
    protobuf_AddDesc_TemperatureData_2eproto();
  }
} static_descriptor_initializer_TemperatureData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TemperatureData_Temperature::kTimestampFieldNumber;
const int TemperatureData_Temperature::kTemperatureFieldNumber;
const int TemperatureData_Temperature::kHumidityFieldNumber;
const int TemperatureData_Temperature::kUniqueIdFieldNumber;
#endif  // !_MSC_VER

TemperatureData_Temperature::TemperatureData_Temperature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TemperatureData_Temperature::InitAsDefaultInstance() {
}

TemperatureData_Temperature::TemperatureData_Temperature(const TemperatureData_Temperature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TemperatureData_Temperature::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  temperature_ = 0u;
  humidity_ = 0u;
  uniqueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TemperatureData_Temperature::~TemperatureData_Temperature() {
  SharedDtor();
}

void TemperatureData_Temperature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TemperatureData_Temperature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TemperatureData_Temperature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TemperatureData_Temperature_descriptor_;
}

const TemperatureData_Temperature& TemperatureData_Temperature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TemperatureData_2eproto();
  return *default_instance_;
}

TemperatureData_Temperature* TemperatureData_Temperature::default_instance_ = NULL;

TemperatureData_Temperature* TemperatureData_Temperature::New() const {
  return new TemperatureData_Temperature;
}

void TemperatureData_Temperature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
    temperature_ = 0u;
    humidity_ = 0u;
    uniqueid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TemperatureData_Temperature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_temperature;
        break;
      }

      // required uint32 temperature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_humidity;
        break;
      }

      // required uint32 humidity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_humidity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &humidity_)));
          set_has_humidity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uniqueId;
        break;
      }

      // required uint32 uniqueId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniqueId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TemperatureData_Temperature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // required uint32 temperature = 2;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->temperature(), output);
  }

  // required uint32 humidity = 3;
  if (has_humidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->humidity(), output);
  }

  // required uint32 uniqueId = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TemperatureData_Temperature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // required uint32 temperature = 2;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->temperature(), target);
  }

  // required uint32 humidity = 3;
  if (has_humidity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->humidity(), target);
  }

  // required uint32 uniqueId = 4;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TemperatureData_Temperature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required uint32 temperature = 2;
    if (has_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->temperature());
    }

    // required uint32 humidity = 3;
    if (has_humidity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->humidity());
    }

    // required uint32 uniqueId = 4;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TemperatureData_Temperature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TemperatureData_Temperature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TemperatureData_Temperature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TemperatureData_Temperature::MergeFrom(const TemperatureData_Temperature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_humidity()) {
      set_humidity(from.humidity());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TemperatureData_Temperature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemperatureData_Temperature::CopyFrom(const TemperatureData_Temperature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemperatureData_Temperature::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TemperatureData_Temperature::Swap(TemperatureData_Temperature* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(temperature_, other->temperature_);
    std::swap(humidity_, other->humidity_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TemperatureData_Temperature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TemperatureData_Temperature_descriptor_;
  metadata.reflection = TemperatureData_Temperature_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TemperatureData::kSensorIdFieldNumber;
const int TemperatureData::kTemperaturesFieldNumber;
#endif  // !_MSC_VER

TemperatureData::TemperatureData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TemperatureData::InitAsDefaultInstance() {
}

TemperatureData::TemperatureData(const TemperatureData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TemperatureData::SharedCtor() {
  _cached_size_ = 0;
  sensorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TemperatureData::~TemperatureData() {
  SharedDtor();
}

void TemperatureData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TemperatureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TemperatureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TemperatureData_descriptor_;
}

const TemperatureData& TemperatureData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TemperatureData_2eproto();
  return *default_instance_;
}

TemperatureData* TemperatureData::default_instance_ = NULL;

TemperatureData* TemperatureData::New() const {
  return new TemperatureData;
}

void TemperatureData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sensorid_ = 0u;
  }
  temperatures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TemperatureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sensorId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensorid_)));
          set_has_sensorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_temperatures;
        break;
      }

      // repeated .TemperatureData.Temperature temperatures = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temperatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_temperatures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_temperatures;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TemperatureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sensorId = 1;
  if (has_sensorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sensorid(), output);
  }

  // repeated .TemperatureData.Temperature temperatures = 2;
  for (int i = 0; i < this->temperatures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->temperatures(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TemperatureData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sensorId = 1;
  if (has_sensorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sensorid(), target);
  }

  // repeated .TemperatureData.Temperature temperatures = 2;
  for (int i = 0; i < this->temperatures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->temperatures(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TemperatureData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sensorId = 1;
    if (has_sensorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensorid());
    }

  }
  // repeated .TemperatureData.Temperature temperatures = 2;
  total_size += 1 * this->temperatures_size();
  for (int i = 0; i < this->temperatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->temperatures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TemperatureData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TemperatureData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TemperatureData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TemperatureData::MergeFrom(const TemperatureData& from) {
  GOOGLE_CHECK_NE(&from, this);
  temperatures_.MergeFrom(from.temperatures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensorid()) {
      set_sensorid(from.sensorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TemperatureData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemperatureData::CopyFrom(const TemperatureData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemperatureData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < temperatures_size(); i++) {
    if (!this->temperatures(i).IsInitialized()) return false;
  }
  return true;
}

void TemperatureData::Swap(TemperatureData* other) {
  if (other != this) {
    std::swap(sensorid_, other->sensorid_);
    temperatures_.Swap(&other->temperatures_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TemperatureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TemperatureData_descriptor_;
  metadata.reflection = TemperatureData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
